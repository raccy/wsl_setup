- name: Get all users
  ansible.builtin.getent:
    database: passwd
  when: ansible_facts.getent_passwd is not defined

- name: Get all groups
  ansible.builtin.getent:
    database: group
  when: ansible_facts.getent_group is not defined

- name: Set default user name
  ansible.builtin.set_fact:
    user_default_user_name: '{{ user_default }}'

- name: Search default user
  ansible.builtin.set_fact:
    user_default_user_getent: >-
      {{ ansible_facts.getent_passwd[user_default_user_name] | default(omit) }}

- name: Fail if not user
  ansible.builtin.fail:
    msg: 'Default user dose not exist.'
  when: user_default_user_getent is not defined

- name: Set default user fact
  ansible.builtin.set_fact:
    user_default_user: >-
      {{ {
        "name": user_default_user_name,
        "passwod": user_default_user_getent[0],
        "uid": user_default_user_getent[1] | int,
        "group": user_default_user_getent[2] | int,
        "comment": user_default_user_getent[3],
        "home": user_default_user_getent[4],
        "shell": user_default_user_getent[5],
      } }}

- name: Set default group name
  ansible.builtin.set_fact:
    user_default_group_name: >-
      {{ (item.value[1] | int == user_default_user.group)
        | ternary(item.key, user_default_group_name | default("")) }}
  loop: '{{ ansible_facts.getent_group | dict2items }}'

- name: Search default user
  ansible.builtin.set_fact:
    user_default_group_getent: >-
      {{ ansible_facts.getent_group[user_default_group_name] | default(omit) }}

- name: Fail if not group
  ansible.builtin.fail:
    msg: 'Default group dose not exist.'
  when: user_default_group_getent is not defined

- name: Set default group fact
  ansible.builtin.set_fact:
    user_default_group: >-
      {{ {
        "name": user_default_group_name,
        "passwod": user_default_group_getent[0],
        "gid": user_default_group_getent[1] | int,
        "users": user_default_group_getent[2],
      } }}
